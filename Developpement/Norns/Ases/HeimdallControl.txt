//===== Alayne Scripts =======================================
//= Heimdall Control Instance
//===== By: ================================================== 
//= Alayne
//===== Current Version: ===================================== 
//= 1.0
//===== Compatible With: ===================================== 
//= rAthena SVN
//= hercules SVN
//===== Description: ========================================= 
//
//= An instance based over Heimdall, the Asgard entrance Guard
//
//===== Todo Remaining: ======================================
//
//===== Additional Comments: =================================
//
//============================================================

un_myst,163,38,5	script	Heimdall Controll::alahcen	CLEAR_NPC,{
OnStart:
	set .@party_id, getcharid(1);
	set .@hc_leader, ( getcharid(0) == getpartyleader(.@party_id,2) );

	set $instance_hc_id, -1;
	
	//RATHENA
	set .@has_instance, $instance_hc_id == getcharid(1);
	//HERCULES
	//set .@has_instance, has_instance(.map$[0], $hc_instance);
	
	set .@instance_delay, ( instance_delay_hc - gettimetick(2) );

	set .@npcname$, "[" + .instance_name$ + "]";
	mes .@npcname$;
	mes "This is the entrance of " + .instance_name$ + ".";
	mes "The more you look at it, the more you feel disturb. Something's wrong happening in there.";
	if( .@instance_delay > 0 )
	{
		set .@hours, .@instance_delay / (60 * 60);
		set .@remaining, .@instance_delay - .@hours * (60 * 60);
		set .@minutes, .@remaining / (60);
		set .@remaining, .@remaining - .@minutes * (60);
		set .@seconds, .@remaining;
		mes "You have to wait : ^FF0000"+ .@hours +" Hours, " + .@minutes + " Minutes and " + .@seconds + " Seconds.^000000";
		//close;
	}
	if (.requiredItem != -1  && countitem(.requiredItem) < 1)
	{
		mes "You decide to step back.";
		mes "At no cost you'll enter in that place without being well prepared.";
		close;
	}
	switch( select( 
		(( .@party_id && .@hc_leader && !.@has_instance )?"Create " + .instance_name$:""),
		(( .@party_id && .@has_instance )?"Enter " + .instance_name$:""),
		(( .@party_id && .@hc_leader && .@has_instance )?"Destroy " + .instance_name$:""),
	"Nevermind."
		)){
	case 1:
		getpartymember .@party_id,2;
		if( .min_party_member >= 1 ){
			set .@origin, getcharid(3);
			set .@gettimetick, gettimetick(2);
			for( set .@i, 0; .@i < $@partymembercount; set .@i, .@i+1 )
				if( attachrid( $@partymemberaid[.@i] ) ){
					set .@member_count, .@member_count + 1;
					if( BaseLevel < .base_level[0] || BaseLevel > .base_level[1] ) set .@fail, .@fail|1;
					if( Zeny < .instance_zeny ) set .@fail, .@fail|2;
					if( instance_delay_hc > .@gettimetick ) set .@fail, .@fail|4;
					if( .@fail ){
						set .@name$, strcharinfo(0);
						break;
					}
				}
			attachrid( .@origin );
		}
		
		//check that nobody else is inside
		for(set .@i,1; .@i<=getarraysize($hrMap$); set .@i,.@i+1)
		{
			if (getmapusers(instance_mapname($hrMap$[.@i], $hc_instance)) > 0) {
				mes "Another team is already in the " + .instance_name$ + ". I can't send you there, sorry.";
				close;
			}
		}
		
		//clean any previously remaining instance
		if($hc_instance != -1)
		{
			instance_destroy $hc_instance;
			set $hc_instance, -1;
			set $instance_hc_id, -1;
		}
		
		if( .@name$ != "" && .@fail ){
			mes "^FF0000[ Failed ]^000000";
			mes "^0055FF"+.@name$+"^000000, You cannot join right now.";
			mes " ";
			mes "^FF0000[ Reason: ]^000000";
			if( .@fail & 1 ) mes "^777777You must be Level: "+.base_level[0]+" - "+.base_level[1]+"^000000";
			if( .@fail & 2 ) mes "^777777You need "+ .instance_zeny +" Zeny^000000";
			if( .@fail & 4 ) mes "^777777You still have cooldown.^000000";
			break;
		}
		
		getpartymember getcharid(1),0;
		if (instance_check_party(.@party_id, .min_party_member, .base_level[0], .base_level[1]) == 0) {
			mes "^0055FF[ "+.instance_name$+" ]^000000";
			mes "Make or join a party with at least "+.min_party_member+" member and try again, with level between " +.base_level[0] + " and " + .base_level[1] + ".";
		}
		else{
			//RATHENA
			set $hc_instance, instance_create( .instance_name$ );
			//HERCULES
			//set $hc_instance, instance_create(.instance_name$, .@party_id, IOT_PARTY);
			if( $hc_instance < 0 ) {
				npctalk .instance_name$ + " reservation failed.";
				mes "^0000FF"+ .instance_name$ +" ^000000 - Reservation Failed!";
				close;
			}
			mes "^0055FF[ "+.instance_name$+" ]^000000";
			mes "^0000FF"+.instance_name$+" ^000000 - Reserved";
			set .@gettimetick, gettimetick(2);
			getpartymember .@party_id,2;
			for( set .@i, 0; .@i < $@partymembercount; set .@i, .@i+1 )
				if( attachrid( $@partymemberaid[.@i] ) ){
					set instance_delay_lastr, ( .@gettimetick + ( .instance_delay ));
					set Zeny, Zeny - .instance_zeny;
					dispbottom "["+.instance_name$+"] -"+ .instance_zeny +" Zeny and Instance Cooldown Applied.";
				}
			attachrid( .@origin );
			npctalk .instance_name$ + " has been generated for Party - " + getpartyname( .@party_id );
			
			set $instance_hc_id, getcharid(1);
			
			//HERCULES
			//for( set .@i, 0; .@i < getarraysize($hrMap$); set .@i,.@i+1 )
			//{
			//	if( instance_attachmap( $hrMap$[.@i],$hc_instance ) == "" ){
			//		setmapflag $hrMap$[.@i],mf_zone,"Memorial Dungeon";
			//		npctalk .instance_name$ + " reservation failed due to map attach failure.";
			//		mes "- ^FF0000Reservation Failed!^000000";
			//		instance_destroy( $hc_instance );
			//		set $hc_instance, -1;
			//		set $instance_hc_id, -1;
			//		close;
			//	}
			//}
			//instance_set_timeout .instance_delay,300,$hc_instance;
			//instance_init($hc_instance);
			
			//disable unused npcs for now
			disablenpc instance_npcname( "lrwarp#0", $hc_instance );
			disablenpc instance_npcname( "lrwarp#1", $hc_instance );
 		}
	case 2:
		if( $instance_hc_id != getcharid(1)){
			mes .instance_name$ + " doesn't exist for Party - "+getpartyname( .@party_id );
		}
		else{
			//RATHENA
			switch(instance_enter(.instance_name$)) {
				default:
					mes "An unknown error has occurred.";
					close;
				case 2:
					mes "The memorial dungeon " + .instance_name$ + " does not exist.";
					mes "The party leader did not generate the dungeon yet.";
					close;
				case 1:
					mes "You can enter the dungeon after making the party.";
					close;
				case 0:
					mapannounce $hrMap$[0], strcharinfo(0)+" from party, " +getpartyname( .@party_id )+", lr entering the dungeon, "+.instance_name$+".",bc_map,"0x00ff99",FW_NORMAL,12;
					end;
			}
			
			//HERCULES
			//if( has_instance( $hrMap$[0] ) == "" ){
			//	mes "Heimdall Control doesnt exist for Party - "+getpartyname( .@party_id );
			//}
			//else{
			//	warp $hrMap$[0],141,24;
			//	instance_announce $hc_instance, getpartyname(getcharid(1))+"  entered in the "+.instance_name$+"!",bc_map,"0x00ff99";
			//}
		}
		break;
	case 3:
		mes .instance_name$ + " Destroyed.";
		instance_destroy $hc_instance;
		set $hc_instance, -1;
		set $instance_hc_id, -1;
		break;
	default: 
		break;
}
close;

OnInit:
	setarray .base_level[0],130, 175;
	setarray $hrMap$[0],"1@uns";
	set .map_size, getarraysize( $hrMap$ );
	set .min_party_member, 1;
	set .instance_zeny, 0;
	set .instance_delay, 7200;
	set $hc_timer_delay, 3600; //1 hour to clean the instance
	set .instance_name$, "Heimdall Control";
	set $hc_instance, -1;
	set $instance_hc_id, -1;
	set .requiredItem, -1; //define the required item to enter in the instance. Leave to -1 to disable
	end;
}


1@uns,101,107,4	script	heimdall_control	HIDDEN_WARP_NPC,2,2,{
function summon_normal;
function summon_guardian;
end;

OnInstanceInit:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $hc_instance );
	
	set $instance_hc_level, 0;
	set .max_hc_level, 5;
	
	set $heimdallId, -1;
	
	set .timerCount, 0;
	set .seasonChange, 0;
	set .seasonChangeCount, 0;
	set .seasonBossHp, 0;
	 
	initnpctimer;
	end;

function	summon_normal	{
	set .@map$, getarg(0);
	set .@npcname$, getarg(1);
	set .@increaseFloor, getarg(2);
	
	if(.@increaseFloor == 1)
	{
		$instance_hc_level++;
	}
	
	switch( $instance_hc_level ){
		case 2:
			//season mobs
			switch(.currentSeason)
			{
				case 0:
					setarray .@monster,3254,3254;
					break;
				case 1:
					setarray .@monster,3254,3254;
					break;
				case 2:
					setarray .@monster,3254,3254;
					break;
				case 3:
					setarray .@monster,3254,3254;
					break;
			}
			break;
		default:
			mapannounce .@map$, "[ Heimdall Control ] : All Floors has been cleared, congratulation. Champions Arena close in 30 seconds.",bc_map,"0x00FF99";
			sleep2 15000;
			instance_destroy $hc_instance;
			set $hc_instance, -1;
			set $instance_hc_id, -1;
			return;
	}
	set .@monster_size, getarraysize( .@monster );
	for( set .@i, 0; .@i < .@monster_size; set .@i,.@i+1 ){
		set .@target_amount, ( .seasonCount[.currentSeason] ) / .@monster_size;
		if(.@target_amount == 0)
		{
			set .@target_amount, 1;
		}
		set .@clabel$, .@npcname$ + "::OnNormalDied";
		set .@tempHelId, areamonster(.@map$,.@coordinate[0],.@coordinate[1],.@coordinate[2],.@coordinate[3],"--ja--",.@monster[.@i],.@target_amount,.@clabel$);
	}
	return;
}

function	summon_guardian	{
	set .@map$, getarg(0);
	set .@npcname$, getarg(1);
	set .@label$, .@npcname$ + "::OnGuardianDied";
	
	setarray .@coordinate,216,225,216,225;
			
	switch( $instance_hc_level ){
		case 2:
			switch(.currentSeason)
			{
				case 0:
					setarray .@monster,3254;
					break;
				case 1:
					setarray .@monster,3254;
					break;
				case 2:
					setarray .@monster,3254;
					break;
				case 3:
					setarray .@monster,3254;
					break;
			}
			break;
		case 3:
			//Heimdall
			setarray .@monster,3254;			
			break;
		default: 
			mapannounce .@map$,"[ Heimdall Control ] : Cleared!! Congratulation!!",bc_map,0x00FF99;
			return;
	}
	set .@monster_size, getarraysize( .@monster );
	for( set .@i, 0; .@i < .@monster_size; set .@i,.@i+1 ){
		set .@target_amount, 1;
		if($instance_hc_level == .max_hc_level)
		{
			set $HelId, areamonster(.@map$,.@coordinate[0],.@coordinate[1],.@coordinate[2],.@coordinate[3],"Heimdall",.@monster[.@i],.@target_amount,.@label$);
		}
		else
		{
			set $heimdallId, areamonster(.@map$,.@coordinate[0],.@coordinate[1],.@coordinate[2],.@coordinate[3],"--ja--",.@monster[.@i],.@target_amount,.@label$);
		}
	}
	
	if(.seasonBossHp != 0)
	{
		//RATHENA
		setunitdata $heimdallId, 2, .seasonBossHp;
		//HERCULES
		//setunitdata $heimdallId, UDT_HP, .seasonBossHp;
	}	
	return;
}

OnNormalDied:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $hc_instance );
	set .@mob_dead_num, mobcount(.@map$,.@npc_name$+"::OnNormalDied" );
	set .@boss_dead_num, mobcount(.@map$,.@npc_name$+"::OnGuardianDied" );
	
	if( .@mob_dead_num == 0 && .boss_dead_num == 0 ){
		if($instance_hc_level == 2)
		{
			set .season[.currentSeason], 0;
			goto OnChangeSeason;
		}
	}
	end;
	
OnGuardianDied:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $hc_instance );
	set .@mob_dead_num, mobcount(.@map$,.@npc_name$+"::OnNormalDied" );
	set .@boss_dead_num, mobcount(.@map$,.@npc_name$+"::OnGuardianDied" );
	
	if( .@mob_dead_num == 0 && .boss_dead_num == 0 ){
		if($instance_hc_level == 2)
		{
			set .season[.currentSeason], 0;
			goto OnChangeSeason;
		}
		else if ($instance_hc_level == .max_hc_level)
		{						
			killmonsterall .@map$, "All";
			
			enablenpc instance_npcname( "alahcve", $hc_instance );
			enablenpc instance_npcname( "alahcur", $hc_instance );
			enablenpc instance_npcname( "alahcsk", $hc_instance );				
			end;
		}
		
		sleep2 15000;
		summon_normal( .@map$,.@npc_name$ );
	}
	end;
	
OnTimer10000:
	//each 10s, increase timer
	set .timerCount, .timerCount + 10;
	if(.timerCount == $hc_timer_delay)
	{
		instance_announce $hc_instance, "[ Heimdall ] *Breath* Let's call the Ases with Gjallahorn. They're now warned! Don't come back before a while!", bc_map, 0xFF0000;
		sleep2 15000;
		instance_destroy $hc_instance;
		set $hc_instance, -1;
		set $instance_hc_id, -1;
		stopnpctimer;
	}
	if(.seasonChange == 1)
	{
		set .seasonChangeCount, .seasonChangeCount + 10;
		if(.seasonChangeCount == 60)
		{
			got OnChangeSeason;
		}
	}
	setnpctimer 0;
	end;
	
OnChangeSeason:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $hc_instance );
	set .@mob_dead_num, mobcount(.@map$,.@npc_name$+"::OnNormalDied" );
	
	//RATHENA
	getunitdata($heimdallId, .@heimdallData);
	set .seasonBossHp, heimdallData[UMOB_HP];
	//HERCULES
	//set .seasonBossHp, getunitdata($heimdallId, UDT_HP);
	killmonster .@map$, "All";
	
	for(set .@i,0; .@i<.season; set .@i,.@i+1)
	{
		if(.season[.@i] == 1)
		{
			set .@tempSeason[getarraysize(.@tempSeason)], .season[.@i];
			set .@tempSeasonRank[getarraysize(.@tempSeasonRank)], .@i;
		}
		if(.season[.@i] == 2)
		{
			set .season[.@i], 1;
			set .seasonCount[.@i], .@mob_dead_num;
		}
	}
	if(getarraysize(.@tempSeason) != 0)
	{
		set .@rand, rand(0,getarraysize(.@tempSeason) - 1);
		set .season[.@tempSeasonRank[.@rand]], 2;
		set .currentSeason, .@tempSeasonRank[.@rand];
		
		summon_normal( .@map$, .@npc_name$, 0 );
		summon_guardian( .@map$, .@npc_name$ );
	}
	else
	{
		//third floor
		goto OnThirdFloorOn;
	}
	set .seasonChangeCount, 0;
	end;
	
OnSecondFloorOn:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $hc_instance );
	$instance_hc_level++;
	//pop monsters
	set .seasonChange, 1;
	setarray .season[0],1,1,1,1;
	setarray .seasonCount[0],25,15,50,10;
	
	summon_normal( .@map$,.@npc_name$, 1 );
	end;
	
OnThirdFloorOn:
	instance_announce $hc_instance, "[ Heimdall ] Allright. Let's get ready now, it's time to fight together.", bc_map, 0x0000FF;
	sleep2 500;
	
	disablenpc instance_npcname( "alahche", $hc_instance );
	
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $hc_instance );
	$instance_hc_level++;
	summon_guardian( .@map$, .@npc_name$ );
	end;
}

1@uns,141,34,3	script	Heimdall::alahche	CLEAR_NPC,4,4,{
	if($instance_hc_level == 1)
	{
		mes "[Heimdall]";
		mes "What do you want?";
		if(select("Check our choice","What are we supposed to do?") == 1)
		{
			next;
			mes "[Heimdall]";
			mes "Allright. Wait a bit.";
			set .currentTry, .currentTry + 1;
			
			getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses");
			getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsps");
			set .@difx, .@nx - .@bx;
			set .@dify, .@ny - .@by;
			if((.@difx >= -1 && .@difx <= 1)
				&& (.@dify >= -1 && .@dify <= 1))
			{
				getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses2");
				getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsus");
				set .@difx, .@nx - .@bx;
				set .@dify, .@ny - .@by;
				if((.@difx >= -1 && .@difx <= 1)
					&& (.@dify >= -1 && .@dify <= 1))
				{
					getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses3");
					getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsas");
					set .@difx, .@nx - .@bx;
					set .@dify, .@ny - .@by;
					if((.@difx >= -1 && .@difx <= 1)
						&& (.@dify >= -1 && .@dify <= 1))
					{
						getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses4");
						getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsws");
						set .@difx, .@nx - .@bx;
						set .@dify, .@ny - .@by;
						if((.@difx >= -1 && .@difx <= 1)
							&& (.@dify >= -1 && .@dify <= 1))
						{
							disablenpc instance_npcname( "alahcses", $hc_instance );
							disablenpc instance_npcname( "alahcses2", $hc_instance );
							disablenpc instance_npcname( "alahcses3", $hc_instance );
							disablenpc instance_npcname( "alahcses4", $hc_instance );
							disablenpc instance_npcname( "alahcsps", $hc_instance );
							disablenpc instance_npcname( "alahcsus", $hc_instance );
							disablenpc instance_npcname( "alahcsas", $hc_instance );
							disablenpc instance_npcname( "alahcsws", $hc_instance );
							
							instance_announce $hc_instance, "[ Heimdall ] Allright. You've understood what I asked. Get ready now, the fight to prove your valor will begin.", bc_map, 0x0000FF;
							sleep2 500;
							donpcevent instance_npcname( "heimdall_control", $hc_instance ) + "::OnSecondFloorOn";
						}
						else
						{
							mes "No, that's not good.";
							mes "You only have " + (.successChance - .currentTry) + " chances remaining.";
						}
					}
					else
					{
						mes "No, that's not good.";
						mes "You only have " + (.successChance - .currentTry) + " chances remaining.";
					}
				}
				else
				{
					mes "No, that's not good.";
					mes "You only have " + (.successChance - .currentTry) + " chances remaining.";
				}
			}
			else
			{
				mes "No, that's not good.";
				mes "You only have " + (.successChance - .currentTry) + " chances remaining.";
			}
		}
		else
		{
			next;
			mes "[Heimdall]";
			mes "I wont tell you. This is part of the Ordeal.";
			mes "Use your mind.";
		}
	}
	end;
	
OnTouch:	
	if(.talking == 0)
	{
		set $hrTalkingId, getcharid(3);
		set .talking, 1;	

		cutin "",2;
		npctalk "You're not supposed to be here...";
		instance_announce $hc_instance, "[Heimdall] You're not supposed to be here...", bc_map, 0x0000FF;
		sleep2 500;
		npctalk "I'm Heimdall. I'm the Guardian of the Bilfrost, the bridge to Asgard.";
		instance_announce $hc_instance, "[Heimdall] I'm Heimdall. I'm the Guardian of the Bilfrost, the bridge to Asgard.", bc_map, 0x0000FF;
		sleep2 500;
		npctalk "I can't let you continue. If you want to pass, you'll have to defeat my Ordeal.";
		instance_announce $hc_instance, "[Heimdall] I can't let you continue. If you want to pass, you'll have to defeat my Ordeal.", bc_map, 0x0000FF;
		sleep2 500;
		instance_announce $hc_instance, "[" + strcharinfo(0) + "] He doesn't seems to realize is not really on the Bilfrost...", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "Here we go. Try to understand what's happening, before I blow on Gjallahorn. Once done, it'll be too late for you.";
		instance_announce $hc_instance, "[Heimdall] Here we go. Try to understand what's happening, before I blow on Gjallahorn. Once done, it'll be too late for you.", bc_map, 0x0000FF;
		sleep2 500;
		
		$instance_hc_level++;
				
		enablenpc instance_npcname( "alahcses", $hc_instance );
		enablenpc instance_npcname( "alahcsps", $hc_instance );
		enablenpc instance_npcname( "alahcas", $hc_instance );
		enablenpc instance_npcname( "alahcsus", $hc_instance );
		enablenpc instance_npcname( "alahcws", $hc_instance );		
	}
	end;
	
OnInstanceInit:	
	enablenpc strnpcinfo(3);
	set .talking, 0;
	set .successChance, 3;
	set .currentTry, 0;
	end;
}

1@uns,141,34,3	script	Season Statue::alahcses	CLEAR_NPC,1,1,{
	end;
	
OnTouch:
	if($hcRefPlayerId == 0)
	{
		set $hcRefPlayerId, getcharid(3);
		addtimer 1000, strnpcinfo(3) + "::OnCheckPlayerPosition";
		getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC);
		set $sesStartX, .@nx;
		set $sesStartY, .@ny;
	}
	end;
	
OnCheckPlayerPosition:
	getmapxy(.@map$, .@x, .@y, UNITTYPE_PC);
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC);
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsps");
	
	set .@mx, $sesStartX - .@x;
	set .@my, $sesStartY - .@y;
	set .@posx, .@nx + .@mx;
	set .@posy, .@ny + .@my;
	
	if(.@posx == .@bx - 1 && .@mx >= 1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by - 1 && .@my >= 1)
	{
		set .@posy, .@ny;
	}
	if(.@posx == .@bx + 1 && .@mx <= -1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by + 1 && .@my <= 1)
	{
		set .@posy, .@ny;
	}
	
	npcwalkto(.@posx, .@posy);
	end;
	
OnPCDieEvent:
	if(strcharinfo(3) == strnpcinfo(4) && getcharid(3) == $hcRefPlayerId)
	{
		set $hcRefPlayerId, 0;
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	set $hcRefPlayerId, 0;
	end;
}

1@uns,141,34,3	script	Season Statue::alahcses2	CLEAR_NPC,{
	end;
	
OnCheckPlayerPosition:
	getmapxy(.@map$, .@x, .@y, UNITTYPE_PC);
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC);
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsus");
	
	set .@mx, $sesStartX - .@x;
	set .@my, $sesStartY - .@y;
	set .@posx, .@nx + .@mx;
	set .@posy, .@ny + .@my;
	
	if(.@posx == .@bx - 1 && .@mx >= 1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by - 1 && .@my >= 1)
	{
		set .@posy, .@ny;
	}
	if(.@posx == .@bx + 1 && .@mx <= -1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by + 1 && .@my <= 1)
	{
		set .@posy, .@ny;
	}
	
	npcwalkto(.@posx, .@posy);
	end;
	
OnPCDieEvent:
	if(strcharinfo(3) == strnpcinfo(4) && getcharid(3) == $hcRefPlayerId)
	{
		set $hcRefPlayerId, 0;
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	set $hcRefPlayerId, 0;
	end;
}

1@uns,141,34,3	script	Season Statue::alahcses3	CLEAR_NPC,{
	end;
	
OnCheckPlayerPosition:
	getmapxy(.@map$, .@x, .@y, UNITTYPE_PC);
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC);
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcas");
	
	set .@mx, $sesStartX - .@x;
	set .@my, $sesStartY - .@y;
	set .@posx, .@nx + .@mx;
	set .@posy, .@ny + .@my;
	
	if(.@posx == .@bx - 1 && .@mx >= 1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by - 1 && .@my >= 1)
	{
		set .@posy, .@ny;
	}
	if(.@posx == .@bx + 1 && .@mx <= -1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by + 1 && .@my <= 1)
	{
		set .@posy, .@ny;
	}
	
	npcwalkto(.@posx, .@posy);
	end;
	
OnPCDieEvent:
	if(strcharinfo(3) == strnpcinfo(4) && getcharid(3) == $hcRefPlayerId)
	{
		set $hcRefPlayerId, 0;
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	set $hcRefPlayerId, 0;
	end;
}

1@uns,141,34,3	script	Season Statue::alahcses4	CLEAR_NPC,{
	end;
	
OnCheckPlayerPosition:
	getmapxy(.@map$, .@x, .@y, UNITTYPE_PC);
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC);
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsws");
	
	set .@mx, $sesStartX - .@x;
	set .@my, $sesStartY - .@y;
	set .@posx, .@nx + .@mx;
	set .@posy, .@ny + .@my;
	
	if(.@posx == .@bx - 1 && .@mx >= 1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by - 1 && .@my >= 1)
	{
		set .@posy, .@ny;
	}
	if(.@posx == .@bx + 1 && .@mx <= -1)
	{
		set .@posx, .@nx;
	}
	if(.@posy == .@by + 1 && .@my <= 1)
	{
		set .@posy, .@ny;
	}
	
	npcwalkto(.@posx, .@posy);
	end;
	
OnPCDieEvent:
	if(strcharinfo(3) == strnpcinfo(4) && getcharid(3) == $hcRefPlayerId)
	{
		set $hcRefPlayerId, 0;
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	set $hcRefPlayerId, 0;
	end;
}

1@uns,141,34,3	script	Spring Spirit::alahcsps	CLEAR_NPC,2,2,{
	end;
	
OnTouch:
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses");
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsps");
	set .@difx, .@nx - .@bx;
	set .@dify, .@ny - .@by;
	if((.@difx >= -1 && .@difx <= 1)
		&& (.@dify >= -1 && .@dify <= 1))
	{
		enablenpc instance_npcname( "alahcses2", $hc_instance );
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	end;
}

1@uns,141,34,3	script	Summer Spirit::alahcsus	CLEAR_NPC,2,2,{
	end;
	
OnTouch:
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses");
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsps");
	set .@difx, .@nx - .@bx;
	set .@dify, .@ny - .@by;
	if((.@difx >= -1 && .@difx <= 1)
		&& (.@dify >= -1 && .@dify <= 1))
	{
		enablenpc instance_npcname( "alahcses3", $hc_instance );
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	end;
}

1@uns,141,34,3	script	Autumn Spirit::alahcss	CLEAR_NPC,2,2,{
	end;
	
OnTouch:
	getmapxy(.@map$, .@nx, .@ny, UNITTYPE_NPC, "alahcses");
	getmapxy(.@map$, .@bx, .@by, UNITTYPE_NPC, "alahcsps");
	set .@difx, .@nx - .@bx;
	set .@dify, .@ny - .@by;
	if((.@difx >= -1 && .@difx <= 1)
		&& (.@dify >= -1 && .@dify <= 1))
	{
		enablenpc instance_npcname( "alahcses4", $hc_instance );
	}
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	end;
}

1@uns,141,34,3	script	Winter Spirit::alahcws	CLEAR_NPC,{
	end;
	
OnInstanceInit:	
	disablenpc strnpcinfo(3);
	end;
}

1@tnm2,131,110,3	script	Verdandi::alahcve	4_F_NYDHOG,3,3,{
	//cutin "ep14_nyd01",2;
	end;
		
		
OnTouch:	
	if(.talking == 0)
	{
		set $owTalkingId, getcharid(3);
		set .talking, 1;	

		cutin "ep14_nyd01",2;
		npctalk "Congratulations. You've passed the first step to the greater Gods.";
		instance_announce $jl_instance, "[Verdandi] Congratulations. You've passed the first step to the greater Gods.", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "Prepare to other ordeals like this one...";
		instance_announce $jl_instance, "[Verdandi] Prepare to other ordeals like this one...", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "The Gods aren't just fighters, they are also tortured mind.";
		instance_announce $jl_instance, "[Verdandi] The Gods aren't just fighters, they are also tortured mind.", bc_map, 0x00FF00;
		sleep2 500;
		
		disablenpc instance_npcname( "alahcve", $ow_instance );
		disablenpc instance_npcname( "alahcur", $ow_instance );
		disablenpc instance_npcname( "alahcsk", $ow_instance );
		
		sleep2 15000;
		instance_destroy( $hc_instance );
		set $hc_instance, -1;
		set $instance_hc_id, -1;
	}
	end;
	
	cutin "", 255;
	end;
	
OnInstanceInit:
	set .talking, 0;
	enablenpc strnpcinfo(3);
	end;
}

1@tnm2,128,112,5	script	Urd::alahcur	4_F_PINKWOMAN,{
	//cutin "bu_maggi1",0;
	end;

OnInstanceInit:
	enablenpc strnpcinfo(3);
	end;
}

1@tnm2,134,112,3	script	Skuld::alaowsk	4_F_SHALOSH,{
	//cutin "shaloshi01",2;
	end;
	
OnInstanceInit:
	enablenpc strnpcinfo(3);
	end;
}


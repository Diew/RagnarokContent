//===== Alayne Scripts =======================================
//= Tyr Strength Instance
//===== By: ================================================== 
//= Alayne
//===== Current Version: ===================================== 
//= 1.0
//===== Compatible With: ===================================== 
//= rAthena SVN
//= hercules SVN
//===== Description: ========================================= 
//
//= An instance based over Tyr, God of War in norse mythology
//
//===== Todo Remaining: ======================================
//
//===== Additional Comments: =================================
//
//============================================================

un_myst,163,38,5	script	Tyr Strength::alahren	CLEAR_NPC,{
OnStart:
	set .@party_id, getcharid(1);
	set .@ts_leader, ( getcharid(0) == getpartyleader(.@party_id,2) );

	set $instance_ts_id, -1;
	
	//RATHENA
	set .@has_instance, $instance_ts_id == getcharid(1);
	//HERCULES
	//set .@has_instance, has_instance(.map$[0], $instance_ts_id);
	
	set .@instance_delay, ( instance_delay_ts - gettimetick(2) );

	set .@npcname$, "[" + .instance_name$ + "]";
	mes .@npcname$;
	mes "This is the entrance of " + .instance_name$ + ".";
	mes "The more you look at it, the more you feel disturb. Something's wrong happening in there.";
	if( .@instance_delay > 0 )
	{
		set .@hours, .@instance_delay / (60 * 60);
		set .@remaining, .@instance_delay - .@hours * (60 * 60);
		set .@minutes, .@remaining / (60);
		set .@remaining, .@remaining - .@minutes * (60);
		set .@seconds, .@remaining;
		mes "You have to wait : ^FF0000"+ .@hours +" Hours, " + .@minutes + " Minutes and " + .@seconds + " Seconds.^000000";
		//close;
	}
	if (.requiredItem != -1  && countitem(.requiredItem) < 1)
	{
		mes "You decide to step back.";
		mes "At no cost you'll enter in that place without being well prepared.";
		close;
	}
	switch( select( 
		(( .@party_id && .@ts_leader && !.@has_instance )?"Create " + .instance_name$:""),
		(( .@party_id && .@has_instance )?"Enter " + .instance_name$:""),
		(( .@party_id && .@ts_leader && .@has_instance )?"Destroy " + .instance_name$:""),
	"Nevermind."
		)){
	case 1:
		getpartymember .@party_id,2;
		if( .min_party_member >= 1 ){
			set .@origin, getcharid(3);
			set .@gettimetick, gettimetick(2);
			for( set .@i, 0; .@i < $@partymembercount; set .@i, .@i+1 )
				if( attachrid( $@partymemberaid[.@i] ) ){
					set .@member_count, .@member_count + 1;
					if( BaseLevel < .base_level[0] || BaseLevel > .base_level[1] ) set .@fail, .@fail|1;
					if( Zeny < .instance_zeny ) set .@fail, .@fail|2;
					if( instance_delay_ts > .@gettimetick ) set .@fail, .@fail|4;
					if( .@fail ){
						set .@name$, strcharinfo(0);
						break;
					}
				}
			attachrid( .@origin );
		}
		
		//check that nobody else is inside
		for(set .@i,1; .@i<=getarraysize($hrMap$); set .@i,.@i+1)
		{
			if (getmapusers(instance_mapname($hrMap$[.@i], $ts_instance)) > 0) {
				mes "Another team is already in the " + .instance_name$ + ". I can't send you there, sorry.";
				close;
			}
		}
		
		//clean any previously remaining instance
		if($ts_instance != -1)
		{
			instance_destroy $ts_instance;
			set $ts_instance, -1;
			set $instance_ts_id, -1;
		}
		
		if( .@name$ != "" && .@fail ){
			mes "^FF0000[ Failed ]^000000";
			mes "^0055FF"+.@name$+"^000000, You cannot join right now.";
			mes " ";
			mes "^FF0000[ Reason: ]^000000";
			if( .@fail & 1 ) mes "^777777You must be Level: "+.base_level[0]+" - "+.base_level[1]+"^000000";
			if( .@fail & 2 ) mes "^777777You need "+ .instance_zeny +" Zeny^000000";
			if( .@fail & 4 ) mes "^777777You still have cooldown.^000000";
			break;
		}
		
		getpartymember getcharid(1),0;
		if (instance_check_party(.@party_id, .min_party_member, .base_level[0], .base_level[1]) == 0) {
			mes "^0055FF[ "+.instance_name$+" ]^000000";
			mes "Make or join a party with at least "+.min_party_member+" member and try again, with level between " +.base_level[0] + " and " + .base_level[1] + ".";
		}
		else{
			//RATHENA
			set $ts_instance, instance_create( .instance_name$ );
			//HERCULES
			//set $ts_instance, instance_create(.instance_name$, .@party_id, IOT_PARTY);
			if( $ts_instance < 0 ) {
				npctalk .instance_name$ + " reservation failed.";
				mes "^0000FF"+ .instance_name$ +" ^000000 - Reservation Failed!";
				close;
			}
			mes "^0055FF[ "+.instance_name$+" ]^000000";
			mes "^0000FF"+.instance_name$+" ^000000 - Reserved";
			set .@gettimetick, gettimetick(2);
			getpartymember .@party_id,2;
			for( set .@i, 0; .@i < $@partymembercount; set .@i, .@i+1 )
				if( attachrid( $@partymemberaid[.@i] ) ){
					set instance_delay_lastr, ( .@gettimetick + ( .instance_delay ));
					set Zeny, Zeny - .instance_zeny;
					dispbottom "["+.instance_name$+"] -"+ .instance_zeny +" Zeny and Instance Cooldown Applied.";
				}
			attachrid( .@origin );
			npctalk .instance_name$ + " has been generated for Party - " + getpartyname( .@party_id );
			
			set $instance_ts_id, getcharid(1);
			set $instance_ts_leader, getcharid(3);
			
			//HERCULES
			//for( set .@i, 0; .@i < getarraysize($hrMap$); set .@i,.@i+1 )
			//{
			//	if( instance_attachmap( $hrMap$[.@i],$ts_instance ) == "" ){
			//		setmapflag $hrMap$[.@i],mf_zone,"Memorial Dungeon";
			//		npctalk .instance_name$ + " reservation failed due to map attach failure.";
			//		mes "- ^FF0000Reservation Failed!^000000";
			//		instance_destroy( $ts_instance );
			//		set $ts_instance, -1;
			//		set $instance_ts_id, -1;
			//		close;
			//	}
			//}
			//instance_set_timeout .instance_delay,300,$ts_instance;
			//instance_init($ts_instance);
			
			//disable unused npcs for now
			disablenpc instance_npcname( "lrwarp#0", $ts_instance );
			disablenpc instance_npcname( "lrwarp#1", $ts_instance );
 		}
	case 2:
		if( $instance_ts_id != getcharid(1)){
			mes .instance_name$ + " doesn't exist for Party - "+getpartyname( .@party_id );
		}
		else{
			//RATHENA
			switch(instance_enter(.instance_name$)) {
				default:
					mes "An unknown error has occurred.";
					close;
				case 2:
					mes "The memorial dungeon " + .instance_name$ + " does not exist.";
					mes "The party leader did not generate the dungeon yet.";
					close;
				case 1:
					mes "You can enter the dungeon after making the party.";
					close;
				case 0:
					mapannounce $hrMap$[0], strcharinfo(0)+" from party, " +getpartyname( .@party_id )+", lr entering the dungeon, "+.instance_name$+".",bc_map,"0x00ff99",FW_NORMAL,12;
					end;
			}
			
			//HERCULES
			//if( has_instance( $hrMap$[0] ) == "" ){
			//	mes "Tyr Strength doesnt exist for Party - "+getpartyname( .@party_id );
			//}
			//else{
			//	warp $hrMap$[0],141,24;
			//	instance_announce $ts_instance, getpartyname(getcharid(1))+"  entered in the "+.instance_name$+"!",bc_map,"0x00ff99";
			//}
		}
		break;
	case 3:
		mes .instance_name$ + " Destroyed.";
		instance_destroy $ts_instance;
		set $ts_instance, -1;
		set $instance_ts_id, -1;
		break;
	default: 
		break;
}
close;

OnInit:
	setarray .base_level[0],130, 175;
	setarray $hrMap$[0],"1@uns";
	set .map_size, getarraysize( $hrMap$ );
	set .min_party_member, 1;
	set .instance_zeny, 0;
	set .instance_delay, 7200;
	set $ts_timer_delay, 3600; //1 hour to clean the instance
	set .instance_name$, "Tyr Strength";
	set $ts_instance, -1;
	set $instance_ts_id, -1;
	set .requiredItem, -1; //define the required item to enter in the instance. Leave to -1 to disable
	end;
}


1@uns,101,107,4	script	tyr_strength	HIDDEN_WARP_NPC,2,2,{
function summon_normal;
function summon_guardian;
end;

OnInstanceInit:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $ts_instance );
	
	set $instance_ts_level, 0;
	set .max_ts_level, 9;
	
	set $TyrId, -1;
	
	set .timerCount, 0;
	setarray $tsPosition$[0], "Pawn", "Bishop", "Knight", "Lancer", "Rook", "Jewel", "General", "King";
	setarray $tsTakenPosition[0], 0, 0, 0, 0, 0, 0, 0, 0;
	setarray $tsMobPosition[0], 0, 0, 0, 0, 0, 0, 0, 0;
	setarray $tsPositionWinner[0], 0, 0, 0, 0, 0, 0, 0, 0;
	
	initnpctimer;
	end;

function	summon_normal	{
	set .@map$, getarg(0);
	set .@npcname$, getarg(1);
	set .@increaseFloor, getarg(2);
	
	if(.@increaseFloor == 1)
	{
		$instance_ts_level++;
	}
	
	switch( $instance_ts_level ){
		default:
			setarray .@monster[0], $tsMobPosition[$instance_ts_level]; 
			return;
	}
	set .@monster_size, getarraysize( .@monster );
	for( set .@i, 0; .@i < .@monster_size; set .@i,.@i+1 ){
		set .@target_amount, ( .@amount[.@i] );
		set .@clabel$, .@npcname$ + "::OnNormalDied";
		areamonster(.@map$,.@coordinate[0],.@coordinate[1],.@coordinate[2],.@coordinate[3],$tsPosition$[$instance_ts_level],.@monster[.@i],.@target_amount,.@clabel$);
	}
	
	return;
}

function	summon_guardian	{
	set .@map$, getarg(0);
	set .@npcname$, getarg(1);
	set .@label$, .@npcname$ + "::OnGuardianDied";
	
	setarray .@coordinate,216,225,216,225;
	setarray .@monster[0], 1002; //real tyr 
			
	set .@monster_size, getarraysize( .@monster );
	for( set .@i, 0; .@i < .@monster_size; set .@i,.@i+1 ){
		set .@target_amount, 1;
		set $TyrId, areamonster(.@map$,.@coordinate[0],.@coordinate[1],.@coordinate[2],.@coordinate[3],"Tyr",.@monster[.@i],.@target_amount,.@label$);
	}
	return;
}

OnPCDieEvent:
	if(strcharinfo(3) == strnpcinfo(4) && $instance_ts_level < getarraysize($tsPosition$))
	{
		if(getcharid(3) == $instance_ts_leader)
		{
			instance_announce $ts_instance, "[ Tyr ] Hehe! Your " + $tsPosition$[getarraysize($tsPosition$) - 1] + " lose, I win this game!", bc_map, 0xFF0000;
			sleep2 500;
			instance_announce $ts_instance, "[ Tyr ] Come again later, ok?!", bc_map, 0xFF0000;
			sleep2 5000;
			instance_destroy $ts_instance;
			set $ts_instance, -1;
			set $instance_ts_id, -1;
			set $instance_ts_leader, -1;
		}
		instance_announce $ts_instance, "[ Tyr ] Sorry, it's a failure. I win this round.", bc_map, 0xFF0000;
		sleep2 500;
		set $tsPositionWinner[$instance_ts_level], 2;
	}
	end;

OnNormalDied:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $ts_instance );
	set .@mob_dead_num, mobcount(.@map$,.@npc_name$+"::OnNormalDied" );
	
	if( .@mob_dead_num == 0 ){		
		if($instance_ts_level < getarraysize($tsPosition$))
		{
			instance_announce $ts_instance, "[ Tyr ] Humpf...Well done. You win this round.", bc_map, 0xFF0000;
			sleep2 500;
			set $tsPositionWinner[$instance_ts_level], 1;
			goto OnNextFightStart;
		}
	}
	end;
	
OnGuardianDied:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $ts_instance );
	set .@mob_dead_num, mobcount(.@map$,.@npc_name$+"::OnGuardianDied" );
	
	if( !.@mob_dead_num ){
		if($instance_ts_level == .max_ts_level)
		{	
			enablenpc instance_npcname( "alatsve", $ts_instance );
			enablenpc instance_npcname( "alatsur", $ts_instance );
			enablenpc instance_npcname( "alatssk", $ts_instance );
		}
	}
	end;
	
OnTimer10000:
	//each 10s, increase timer
	set .timerCount, .timerCount + 10;
	if(.timerCount == $ts_timer_delay)
	{
		instance_announce $ts_instance, "[ Tyr Strength ] The Dimension collapse! You have to flee, right now!", bc_map, 0xFF0000;
		sleep2 15000;
		instance_destroy $ts_instance;
		set $ts_instance, -1;
		set $instance_ts_id, -1;
		stopnpctimer;
	}
	setnpctimer 0;
	end;
	
OnNextFightStart:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $ts_instance );
	
	set $instance_ts_level, $instance_ts_level + 1;
	
	if($instance_ts_level >= getarraysize($tsPosition$))
	{
		goto OnCountPoints;
	}
	
	if($tsTakenPosition[0] == 0)
	{
		instance_announce $ts_instance, "[ Tyr ] No fighter was designed for this round.", bc_map, 0xFF0000;
		sleep2 500;
		instance_announce $ts_instance, "[ Tyr ] " + $tsPosition$[getarraysize($tsPosition$) - 1] + ", please, choose the fighter between those who won.", bc_map, 0xFF0000;
		sleep2 500;
		if(attachrid($instance_ts_leader) == 1 && strnpcinfo(4) == strcharinfo(3))
		{
			deletarray .@tempFighters[0], getarraysize(.@tempFighters);
			set .@menu$, "";
			for(set .@i, 0; .@i<$instance_ts_level; set .@i,.@i+1)
			{
				if(attachrid($tsTakenPosition[.@i]) && strcharinfo(3) == strnpcinfo(4) && $tsPositionWinner[.@i] == 2)
				{					
					set .@menu$, .@menu$ + (.@i == 0 ? "" : ":") + strcharinfo(0);
					set .@tempFighters[getarraysize(.@tempFighters)], $tsTakenPosition[.@i];
				}
			}
			set .@menu$, .@menu$ + $tsTakenPosition[getarraysize($tsTakenPosition) - 1];
			set .@choice, select(.@menu$) - 1;
			
			set $tsTakenPosition[$instance_ts_level], .@tempFighters[.@choice];
		}
		else
		{
			instance_announce $ts_instance, "[ Tyr ] The Leader fled? Seriously...Sorry, but you're out!", bc_map, 0xFF0000;
			sleep2 5000;
			instance_destroy $ts_instance;
			set $ts_instance, -1;
			set $instance_ts_id, -1;
			stopnpctimer;
		}
	}
	
	if(attachrid($tsTakenPosition[$instance_ts_level]) == 1)
	{
		set .@message$, "" + strcharinfo(0) + " vs " + getmonsterinfo($tsMobPosition[$instance_ts_level], 0);
	}
	
	instance_announce $ts_instance, "[ Tyr ] Get Ready! Next fight: " + .@message$, bc_map, 0xFF0000;
	sleep2 500;
	summon_normal( .@map$, .@npc_name$, 0 );
	end;
	
OnCountPoints:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $ts_instance );
	
	set .@win, 0;
	set .@fail, 0;
	for(set .@i,0; .@i<getarraysize($tsPositionWinner); set .@i, .@i+1)
	{
		if($tsPositionWinner[.@i] == 1)
		{
			set .@win, .@win + 1;
		}
		else
		{
			set .@fail, .@fail + 1;
		}
	}
	
	if(.@win > .@fail)
	{
		instance_announce $ts_instance, "[ Tyr ] Okay. You've win this game. Now, enough playing. Let's fight, for real.", bc_map, 0xFF0000;
		sleep2 500;
		summon_guardian( .@map$, .@npc_name$ );
	}
	else
	{
		instance_announce $ts_instance, "[ Tyr ] Hehe, it wasn't enough! I win!", bc_map, 0xFF0000;
		sleep2 500;
		instance_announce $ts_instance, "[ Tyr ] Come again if you wanna try once more!", bc_map, 0xFF0000;
		sleep2 5000;
		instance_destroy $ts_instance;
		set $ts_instance, -1;
		set $instance_ts_id, -1;
		stopnpctimer;
	}
	end;
	
OnFirstFloorOn:
	set .@map$, strnpcinfo(4);
	set .@npc_name$, instance_npcname( strnpcinfo(0), $ts_instance );
	
	instance_announce $ts_instance, "[ Tyr ] Allright, the Game will start soon now.", bc_map, 0xFF0000;
	sleep2 500;
	instance_announce $ts_instance, "[ Tyr ] It's pretty easy. Win more round than my army to go further.", bc_map, 0xFF0000;
	sleep2 500;
	instance_announce $ts_instance, "[ Tyr ] Each round will be a one versus one.", bc_map, 0xFF0000;
	sleep2 500;
	instance_announce $ts_instance, "[ Tyr ] Each position which hasn't been provided can be taken by the " + $tsPosition$[getarraysize($tsPosition$) - 1] + " or a winner of previous fights.", bc_map, 0xFF0000;
	sleep2 500;
	instance_announce $ts_instance, "[ Tyr ] If the " + $tsPosition$[getarraysize($tsPosition$) - 1] + " is eliminated, you all lose.", bc_map, 0xFF0000;
	sleep2 500;
		
	if(attachrid($tsTakenPosition[0]) == 1)
	{
		set .@message$, "" + strcharinfo(0) + " vs " + getmonsterinfo($tsMobPosition[0], 0);
	}
	else
	{
		instance_announce $ts_instance, "[ Tyr ] Wow...First fight is allready a redittion?", bc_map, 0xFF0000;
		sleep2 500;
		instance_announce $ts_instance, "[ Tyr ] The " + $tsPosition$[getarraysize($tsPosition$) - 1] + " has to fight then.", bc_map, 0xFF0000;
		sleep2 500;
		set .@message$, "" + strcharinfo(0) + " vs " + getmonsterinfo($tsMobPosition[0], 0);		
	}
	
	instance_announce $ts_instance, "[ Tyr ] Get Ready! First fight: " + .@message$, bc_map, 0xFF0000;
	sleep2 500;
	summon_normal( .@map$, .@npc_name$, 0 );
	end;
}

1@uns,141,34,3	script	Tyr::alatshe	CLEAR_NPC,4,4,{
	mes "[Tyr]";
	set .@ts_leader, ( getcharid(0) == getpartyleader(.@party_id,2) );
	if(.@ts_leader != 1)
	{
		mes "Send me your leader. I'll talk with him only.";
		close;
	}
	
	getpartymember(getcharid(1), 2);
	set .@partyCount, $@partymembercount;
	copyarray .@members$[0], $@partymembername$[0], .@partyCount;
	copyarray .@membersAId[0], $@partymemberaid[0], .@partyCount;
	
	set .@pmenu$, "";
	for(set .@i,0; .@i<getarraysize($tsPosition$); set .@i,.@i+1)
	{
		set .@pmenu$, .@pmenu$ + (.@i == 0 ? "" : ":") + $tsPosition$[.@i];
	}
	
	set .@menu$, "";
	for(set .@i, 0; .@i<.@partyCount; set .@i,.@i+1)
	{
		if(attachrid(.@membersAId[.@i]) && strcharinfo(3) == strnpcinfo(4))
		{
			set .@menu$, .@menu$ + (.@i == 0 ? "" : ":") + .@members$[.@i];
		}
		else
		{
			deletearray .@membersAId[.@i], 1;
			deletearray .@members$[.@i], 1;
		}
	}
	
	mes "Did you choose your positions?";
	goto OnChoosePosition;
	close;
	
OnChoosePosition:
	set .@posSelected, select(.@pmenu$) - 1;
	if($tsTakenPosition[.@posSelected] != 0)
	{
		next;
		mes "[Tyr]";
		mes "Come on...This position is allready taken.";
		goto OnChoosePosition;
	}
	next;
	mes "[Tyr]";
	mes "So who's the happy fighter selected?";
	set .@choice, select(.@menu$) - 1;
	if(attachrid(.@membersAId[.@choice]) == 1)
	{
		set $tsTakenPosition[.@posSelected], .@membersAId[.@choice];
		instance_announce $ts_instance, "[Tyr] " + .@members$[.@choice]  + " have been chosen as " + $tsPosition$[.@posSelected] + ".", bc_map, 0x00FF00;
		sleep2 500;
		deletearray(.@membersAId[.@choice], 1);
	}	
	if(getarraysize(.@membersAId) == 0)
	{
		if($tsTakenPosition[0] == 0)
		{
			next;
			mes "[Tyr]";
			mes "" + $tsPosition$[0] + " place can't be empty.";
			mes "I'll considere your first teammate will play this role.";
			
			getpartymember getcharid(1), 2;
			set .@found, 0;
			for(set .@i, 0; .@i<.@partyCount && .@found == 0; set .@i,.@i+1)
			{
				if(.@membersAId[.@i] != getcharid(3) && (attachrid(.@membersAId[.@i]) && strcharinfo(3) == strnpcinfo(4)))
				{
					//first teammate which isn't the leader and is on the map
					for(set .@j,0; .@j<getarraysize($tsTakenPosition) && .@found == 0; set .@j,.@j+1)
					{
						set $tsTakenPosition[.@j], 0;
						set $tsTakenPosition[0], getcharid(3);
						set .@found, 1;	
					}
				}
			}
			
			set .@ok, 0;
			for(set .@i,0; .@i<getarraysize($tsTakenPosition) && .@ok == 0; set .@i,.@i+1)
			{
				if($tsTakenPosition[.@i] == getcharid(3))
				{
					set $tsTakenPosition[.@i], 0;
					set $tsTakenPosition[getarraysize($tsTakenPosition) - 1], getcharid(3);
					set .@ok, 1;
				}
			}
		}
		if($tsTakenPosition[getarraysize($tsTakenPosition) - 1] == 0)
		{
			next;
			mes "[Tyr]";
			mes "" + $tsPosition$[getarraysize($tsPosition$)] + " place can't be empty.";
			mes "I'll considere you'll play this role.";
			
			set .@ok, 0;
			for(set .@i,0; .@i<getarraysize($tsTakenPosition) && .@ok == 0; set .@i,.@i+1)
			{
				if($tsTakenPosition[.@i] == getcharid(3))
				{
					set $tsTakenPosition[.@i], 0;
					set $tsTakenPosition[getarraysize($tsTakenPosition) - 1], getcharid(3);
					set .@ok, 1;
				}
			}
		}
		next;
		mes "[Tyr]";
		mes "Okay. Now I'm gonna choose my own champions.";
		
		callsub OnFillTyrPositions;
		
		next;
		mes "[Tyr]";
		mes "Allright, we're ready now!";
		donpcevent instance_npcname( "tyr_strength", $ts_instance ) + "::OnFirstFloorOn";
	}
	else
	{
		next;
		mes "[Tyr]";
		mes "Allright, who's next?";
		goto OnChoosePosition;
	}
	end;
	
OnFillTyrPositions:
	//setarray $tsPosition$[0], "Pawn", "Bishop", "Knight", "Lancer", "Rook", "Jewel", "General", "King";

	for(set .@i,0; .@i<getarraysize($tsPosition$) - 1; set .@i,.@i+1)
	{
		switch(.@i)
		{
			case 0:
				//Pawn
				setarray .@monster[0],1002,1003,1004;
				break;
			case 1:
				//Bishop
				setarray .@monster[0],1002,1003,1004;
				break;
			case 2:
				//Knight
				setarray .@monster[0],1002,1003,1004;
				break;
			case 3:
				//Lancer
				setarray .@monster[0],1002,1003,1004;
				break;
			case 4:
				//Rook
				setarray .@monster[0],1002,1003,1004;
				break;
			case 5:
				//Jewel
				setarray .@monster[0],1002,1003,1004;
				break;
			case 6:
				//General
				setarray .@monster[0],1002,1003,1004;
				break;
		}
		set $tsMobPosition[.@i], .@monster[rand(0,getarraysize(.@monster) - 1];
	}
	//King will be played by Tyr
	next;
	mes "[Tyr]";
	mes "Of course, I'll play the King.";
	set $tsMobPosition[getarraysize($tsMobPosition) - 1], 1002;
	return;
	
OnTouch:	
	if(.talking == 0)
	{
		set $hrTalkingId, getcharid(3);
		set .talking, 1;	

		cutin "",2;
		npctalk "Welcome to my place, humans. I can feel it...";
		instance_announce $ts_instance, "[Tyr] Welcome to my place, humans. I can feel it...", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "You've encountered countless dangers. Fight countless ennemies. And you're still alive.";
		instance_announce $ts_instance, "[Tyr] You've encountered countless dangers. Fight countless ennemies. And you're still alive.", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "You're apparently some great warriors. Let's have a fight!";
		instance_announce $ts_instance, "[Tyr] You're apparently some great warriors. Let's have a fight!", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "But not a simple fight, or I'll crush you too easily. We'll have a game!";
		instance_announce $ts_instance, "[Tyr] But not a simple fight, or I'll crush you too easily. We'll have a game!", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "Rules are simple. We'll choose some champions. One per kind of role, in your team for you, in my army for me.";
		instance_announce $ts_instance, "[Tyr] Rules are simple. We'll choose some champions. One per kind of role, in your team for you, in my army for me.", bc_map, 0x00FF00;
		sleep2 500;
		npctalk "Let's go now. Come to me to choose each one's position. Choose wisely.";
		instance_announce $ts_instance, "[Tyr] Let's go now. Come to me to choose each one's position. Choose wisely.", bc_map, 0x00FF00;
		sleep2 500;
	}
	end;
	
OnInstanceInit:	
	enablenpc strnpcinfo(3);
	set .talking, 0;
	end;
}

1@uns,141,34,3	script	Verdandi::alatsve	4_F_NYDHOG,2,2,{
	//cutin "ep14_nyd01",2;
	end;
		
OnTouch:	
	if(.talking == 0)
	{
		set $hrTalkingId, getcharid(3);
		set .talking, 1;	

		cutin "ep14_nyd01",2;
		npctalk "Tyr...He once was a fierce, but proud and reliable fighter.";
		instance_announce $jl_instance, "[Verdandi] Tyr...He once was a fierce, but proud and reliable fighter.", bc_map, 0x00FF00;
		sleep2 1500;
	
		donpcevent instance_npcname( "alahrsk", $ts_instance ) + "::OnDialog1_2";
	}
	end;

OnInstanceInit:
	set .talking, 0;
	disablenpc strnpcinfo(3);
	end;
}

1@uns,139,32,5	script	Urd::alatsur	4_F_PINKWOMAN,{
	//cutin "bu_maggi1",0;
	end;
		
OnDialog1_3:			
	attachrid($hrTalkingId);
	cutin "bu_maggi1", 2;
	npctalk "Thanks to you, we're now nearly done.";
	instance_announce $ts_instance, "[Urd] Thanks to you, we're now nearly done.", bc_map, 0x00FF00;
	sleep2 1500;
	npctalk "Continue like that!";
	instance_announce $ts_instance, "[Urd] Continue like that!", bc_map, 0x00FF00;
	
	cutin "", 255;
	instance_destroy $ts_instance;
	set $ts_instance, -1;
	set $instance_ts_id, -1;
	end;	
	
OnInstanceInit:
	disablenpc strnpcinfo(3);
	end;
}

1@uns,139,32,5	script	Skuld::alatssk	4_F_SHALOSH,{
	//cutin "shaloshi01",2;
	end;
		
OnDialog1_2:			
	attachrid($hrTalkingId);
	cutin "shaloshi01", 2;
	npctalk "Those gods have turned mad, with the Ragnarok approaching...";
	instance_announce $ts_instance, "[Skuld] Those gods have turned mad, with the Ragnarok approaching...", bc_map, 0x00FF00;
	sleep2 1500;
	
	donpcevent instance_npcname( "alahrur", $ts_instance ) + "::OnDialog1_3";
	end;
	
OnInstanceInit:
	disablenpc strnpcinfo(3);
	end;
}

